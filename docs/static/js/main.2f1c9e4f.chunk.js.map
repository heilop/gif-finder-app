{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifFinderApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categs","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifFinderApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAM,OAAKP,GAAL,mBAAoBO,OACxCN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAUT,EACVU,SAlBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCPdG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfC,EADe,iDACkCC,UAAUH,GAD5C,+DAEEI,MAAMF,GAFR,cAEfG,EAFe,gBAKXA,EAASC,OALE,uBAInBC,EAJmB,EAInBA,KAGIC,EAAOD,EAAKE,KAAI,SAAAC,GACpB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAXhB,kBAedM,GAfc,4CAAH,sDCCPO,EAAc,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGtC,OADAc,QAAQC,IAAIN,EAAIC,EAAOV,GAErB,sBAAKgB,UAAY,OAAjB,UACE,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,4BAAKA,QCFES,EAAU,SAAC,GAAmB,IAAhBrB,EAAe,EAAfA,SAEzB,ECJ0B,SAACA,GAE3B,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNe,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACR1B,EAAQC,GACP0B,MAAK,SAAAC,GAEJH,EAAS,CACPjB,KAAMoB,EACNL,SAAS,SAGZ,CAACtB,IAEGuB,EDd2BK,CAAa5B,GAAjCa,EAAd,EAAQN,KAAce,EAAtB,EAAsBA,QAEtB,OACE,qCACE,6BAAMtB,IACJsB,GAAW,mBAAGJ,UAAU,6CAAb,qBAEb,qBAAKA,UAAU,8CAAf,SAGIL,EAAOJ,KAAI,SAAAC,GAAG,OACZ,cAAC,EAAD,aAEEA,IAAOA,GACFA,GAFGA,EAAIC,aEaXkB,EA7BM,WAEnB,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAOA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BAEI6C,EAAWrB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEEA,SAAWA,GADLA,Y,MChBpB+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2f1c9e4f.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories(categs => [inputValue, ...categs]);\n      setInputValue('');\n    }\n  }\n\n  return (\n    <form onSubmit = { handleSubmit } >\n      <input\n        type=\"text\"\n        value = { inputValue }\n        onChange = { handleInputChange }\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n","\nexport const getGifs = async(category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=WHSsSRkhdUsLb8H9KJR8CzZEdUdQouG6`;\n  const response = await fetch(url);\n  const {\n    data\n  } = await response.json();\n\n  const gifs = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url,\n    }\n  })\n\n  return gifs;\n}\n","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n\n  console.log(id, title, url);\n  return (\n    <div className = 'card'>\n      <img src={ url } alt={ title }></img>\n      <p>{ title }</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\n// import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( { category }) => {\n\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{ category }</h3>\n      { loading && <p className=\"card-grid animate__animated animate__flash\">Loading</p> }\n\n      <div className=\"card-grid animate__animated animate__fadeIn\">\n\n        {\n          images.map(img => (\n            <GifGridItem\n              key = { img.id }\n              img = {img}\n              { ...img }\n            />\n          ))\n        }\n      </div>\n    </>\n  )\n}\n","import { useEffect, useState } from \"react\"\n\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect(() => {\n    getGifs(category)\n    .then(imgs => {\n\n      setState({\n        data: imgs,\n        loading: false\n      });\n    })\n  }, [category])\n\n  return state;\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifFinderApp = () => {\n  // const categories = ['Mr. Robot', 'The walking Dead', 'Ted Lasso'];\n  const [categories, setCategories] = useState(['Mr. Robot']);\n\n  // const handleAdd = (e) => {\n  //   // setCategories([...categories, 'House of Cards']);\n  //   setCategories( categs => [...categs, 'House of Cards']);\n  // }\n\n  return (\n    <>\n      <h2>GifFinderApp</h2>\n      <AddCategory setCategories = { setCategories } />\n      <br />\n\n      <ol>\n        {\n          categories.map(category => (\n            <GifGrid\n              key={ category }\n              category={ category }\n            />\n          ))\n        }\n      </ol>\n    </>\n  );\n};\n\nexport default GifFinderApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifFinderApp from './GifFinderApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifFinderApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}